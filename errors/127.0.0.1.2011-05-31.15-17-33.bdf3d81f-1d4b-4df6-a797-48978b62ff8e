(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/franzejr/web2py/applications/E_Learning/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae://mynamespace\')             # connect to Google BigTable\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:a667c7a1-8129-45c6-a7c5-397d1085dabe\'   # before define_tables()\nauth.define_tables()                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n\ndb.define_table(\'post\',\n    Field(\'user\', db.auth_user, readable=False, writable=False),\n    Field(\'title\'),\n    Field(\'body\', \'text\'),\n    Field(\'dateline\', \'datetime\', default=request.now,readable=False, writable=False),\n    \n)\n\ndb.post.id.readable=False\ndb.post.id.writable=False\n\ndb.define_table(\'comment\',\n    Field(\'post\', db.post, readable=False, writable=False),\n    Field(\'name\', requires=IS_NOT_EMPTY(error_message=T(\'Please enter your name\') ) ),\n    Field(\'email\', requires=IS_NOT_EMPTY(error_message=T(\'Please enter your e-mail\')),\n    Field(\'commentbody\', \'text\', requires=IS_NOT_EMPTY(error_message="Please enter your comment.")),\n    Field(\'dateline\',  \'datetime\', default=request.now, readable=False, writable=False),\n)\n\ndb.define_table(\'category\',\n    Field(\'title\')\n)'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__getslice__'
p11
S"<method-wrapper '__getslice__' of exceptions.SyntaxError object>"
p12
sS'text'
p13
S'"db.define_table(\'category\',\\n"'
p14
sS'__str__'
p15
S"<method-wrapper '__str__' of exceptions.SyntaxError object>"
p16
sS'__reduce__'
p17
S'<built-in method __reduce__ of exceptions.SyntaxError object>'
p18
sS'__dict__'
p19
S'{}'
p20
sS'__sizeof__'
p21
S'<built-in method __sizeof__ of exceptions.SyntaxError object>'
p22
sS'__init__'
p23
S"<method-wrapper '__init__' of exceptions.SyntaxError object>"
p24
sS'__setattr__'
p25
S"<method-wrapper '__setattr__' of exceptions.SyntaxError object>"
p26
sS'__reduce_ex__'
p27
S'<built-in method __reduce_ex__ of exceptions.SyntaxError object>'
p28
sS'__new__'
p29
S'<built-in method __new__ of type object>'
p30
sS'__format__'
p31
S'<built-in method __format__ of exceptions.SyntaxError object>'
p32
sS'__class__'
p33
S"<type 'exceptions.SyntaxError'>"
p34
sS'filename'
p35
S"'/home/franzejr/web2py/applications/E_Learning/models/db.py'"
p36
sS'lineno'
p37
S'99'
p38
sS'msg'
p39
S"'invalid syntax'"
p40
sS'__doc__'
p41
S"'Invalid syntax.'"
p42
sS'__getitem__'
p43
S"<method-wrapper '__getitem__' of exceptions.SyntaxError object>"
p44
sS'__setstate__'
p45
S'<built-in method __setstate__ of exceptions.SyntaxError object>'
p46
sS'__getattribute__'
p47
S"<method-wrapper '__getattribute__' of exceptions.SyntaxError object>"
p48
sS'print_file_and_line'
p49
S'None'
p50
sS'args'
p51
S'(\'invalid syntax\', (\'/home/franzejr/web2py/applications/E_Learning/models/db.py\', 99, 2, "db.define_table(\'category\',\\n"))'
p52
sS'__subclasshook__'
p53
S'<built-in method __subclasshook__ of type object>'
p54
sS'offset'
p55
S'2'
sS'__unicode__'
p56
S'<built-in method __unicode__ of exceptions.SyntaxError object>'
p57
sS'__delattr__'
p58
S"<method-wrapper '__delattr__' of exceptions.SyntaxError object>"
p59
sS'__repr__'
p60
S"<method-wrapper '__repr__' of exceptions.SyntaxError object>"
p61
sS'__hash__'
p62
S"<method-wrapper '__hash__' of exceptions.SyntaxError object>"
p63
ssS'evalue'
p64
S'invalid syntax (db.py, line 99)'
p65
sS'request'
p66
(dp67
S'function'
p68
S"'view'"
p69
sS'body'
p70
S"<open file '<fdopen>', mode 'w+b'>"
p71
sS'wsgi'
p72
S"<Storage {'start_response': <function <lambda> a...late', 'PATH_INFO': '/E_Learning/posts/view/2'}}>"
p73
sS'extension'
p74
S"'html'"
p75
sS'vars'
p76
S"<Storage {'_formkey': '755a84ce-a2a8-4ddf-9bb3-c...e': 'comment_create', 'name': '', 'email': 'dd'}>"
p77
sS'cid'
p78
S'None'
p79
sS'url'
p80
S'<gluon.html.XML object>'
p81
sS'raw_extension'
p82
S'None'
p83
sg51
S"['2']"
p84
sS'controller'
p85
S"'posts'"
p86
sS'cookies'
p87
S"<SimpleCookie: session_id_E_Learning='127.0.0.1-...'127.0.0.1-29d0776c-0ca7-479a-aa4c-779ce2618c04'>"
p88
sS'application'
p89
S"'E_Learning'"
p90
sS'ajax'
p91
S'False'
p92
sS'client'
p93
S"'127.0.0.1'"
p94
sS'env'
p95
S"<Storage {'content_length': '686', 'http_accept_...59622', 'path_info': '/E_Learning/posts/view/2'}>"
p96
sS'raw_args'
p97
S"'2'"
p98
sS'get_vars'
p99
S'<Storage {}>'
p100
sS'folder'
p101
S"'/home/franzejr/web2py/applications/E_Learning/'"
p102
sS'now'
p103
S'datetime.datetime(2011, 5, 31, 15, 17, 33, 750531)'
p104
sS'post_vars'
p105
S"<Storage {'_formkey': '755a84ce-a2a8-4ddf-9bb3-c...e': 'comment_create', 'name': '', 'email': 'dd'}>"
p106
ssS'frames'
p107
(lp108
(dp109
S'file'
p110
S'/home/franzejr/web2py/gluon/restricted.py'
p111
sS'dump'
p112
(dp113
S'code'
p114
S'"# -*- coding: utf-8 -*-\\n# this file is released ...\\ndb.define_table(\'category\',\\n    Field(\'title\')\\n)"'
p115
sS'layer'
p116
S"'/home/franzejr/web2py/applications/E_Learning/models/db.py'"
p117
sS'global compile2'
p118
S'<function compile2>'
p119
sS'ccode'
p120
S'undefined'
p121
ssS'lnum'
p122
I186
sS'lines'
p123
(dp124
I181
S''
sI182
S'    try:'
p125
sI183
S'        if type(code) == types.CodeType:'
p126
sI184
S'            ccode = code'
p127
sI185
S'        else:'
p128
sI186
S'            ccode = compile2(code,layer)'
p129
sI187
S''
sI188
S'        exec ccode in environment'
p130
sI189
S'    except HTTP:'
p131
sI190
S'        raise'
p132
ssS'call'
p133
S'(code="# -*- coding: utf-8 -*-\\n# this file is released ...\\ndb.define_table(\'category\',\\n    Field(\'title\')\\n)", environment={\'A\': <class \'gluon.html.A\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, \'CODE\': <class \'gluon.html.CODE\'>, \'CRYPT\': <class \'gluon.validators.CRYPT\'>, \'DAL\': <class \'gluon.dal.DAL\'>, ...}, layer=\'/home/franzejr/web2py/applications/E_Learning/models/db.py\')'
p134
sS'func'
p135
S'restricted'
p136
sa(dp137
g110
S'/home/franzejr/web2py/gluon/restricted.py'
p138
sg112
(dp139
S'builtincompile'
p140
S'<built-in function compile>'
p141
sS'code'
p142
S'"# -*- coding: utf-8 -*-\\n# this file is released ...\\ndb.define_table(\'category\',\\n    Field(\'title\')\\n)"'
p143
sS'code.rstrip'
p144
S'<built-in method rstrip of str object>'
p145
sS').replace'
p146
g121
sS'layer'
p147
S"'/home/franzejr/web2py/applications/E_Learning/models/db.py'"
p148
ssg122
I173
sg123
(dp149
I168
S''
sI169
S'def compile2(code,layer):'
p150
sI170
S'    """'
p151
sI171
S"    The +'\\n' is necessary else compile fails when code ends in a comment."
p152
sI172
S'    """'
p153
sI173
S"    return compile(code.rstrip().replace('\\r\\n','\\n')+'\\n', layer, 'exec')"
p154
sI174
S''
sI175
S"def restricted(code, environment={}, layer='Unknown'):"
p155
sI176
S'    """'
p156
sI177
S'    runs code in environment and returns the output. if an exception occurs'
p157
ssg133
S'(code="# -*- coding: utf-8 -*-\\n# this file is released ...\\ndb.define_table(\'category\',\\n    Field(\'title\')\\n)", layer=\'/home/franzejr/web2py/applications/E_Learning/models/db.py\')'
p158
sg135
S'compile2'
p159
sasS'pyver'
p160
S'Python 2.7.1+: /usr/bin/python'
p161
sS'session'
p162
(dp163
S'_formkey[comment_create]'
p164
S"'4f2d4d7c-904c-4803-9afb-84c2075c17ca'"
p165
sS'_formkey[post_create]'
p166
S"'e83b330d-d9bd-4726-b344-8dee63d82cb2'"
p167
sS'auth'
p168
S'None'
p169
sS'_formkey[post_2]'
p170
S"'e9815cde-7332-4b08-851e-2fee21ba1183'"
p171
ssS'etype'
p172
S"<type 'exceptions.SyntaxError'>"
p173
sS'date'
p174
S'Tue May 31 15:17:33 2011'
p175
sS'response'
p176
(dp177
S'status'
p178
S'200'
p179
sg70
S'<cStringIO.StringO object>'
p180
sg87
S"<SimpleCookie: session_id_E_Learning='127.0.0.1-a65ecb97-b349-4fcc-a363-00fe3e9da59c'>"
p181
sS'_vars'
p182
S'None'
p183
sS'session_file'
p184
S"<open file '/home/franzejr/web2py/applications/E...65ecb97-b349-4fcc-a363-00fe3e9da59c', mode 'rb+'>"
p185
sS'flash'
p186
S"''"
p187
sS'_custom_rollback'
p188
S'None'
p189
sS'session_id'
p190
S"'127.0.0.1-a65ecb97-b349-4fcc-a363-00fe3e9da59c'"
p191
sS'headers'
p192
S"<Storage {'Expires': 'Tue, 31 May 2011 18:17:33 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p193
sS'meta'
p194
S'<Storage {}>'
p195
sS'session_filename'
p196
S"'/home/franzejr/web2py/applications/E_Learning/se...ns/127.0.0.1-a65ecb97-b349-4fcc-a363-00fe3e9da59c'"
p197
sS'postprocessing'
p198
S'[]'
p199
sS'menu'
p200
S'[]'
p201
sS'_view_environment'
p202
S"{'A': <class 'gluon.html.A'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, 'DAL': <class 'gluon.dal.DAL'>, ...}"
p203
sS'session_id_name'
p204
S"'session_id_E_Learning'"
p205
sS'_custom_commit'
p206
S'None'
p207
sS'_caller'
p208
S'<function <lambda>>'
p209
sS'files'
p210
S'[]'
p211
sS'view'
p212
S"'posts/view.html'"
p213
ssS'locals'
p214
(dp215
g3
S"'/home/franzejr/web2py/applications/E_Learning/models/db.py'"
p216
sg5
S'"# -*- coding: utf-8 -*-\\n# this file is released ...\\ndb.define_table(\'category\',\\n    Field(\'title\')\\n)"'
p217
sssS'traceback'
p218
S'Traceback (most recent call last):\n  File "/home/franzejr/web2py/gluon/restricted.py", line 186, in restricted\n    ccode = compile2(code,layer)\n  File "/home/franzejr/web2py/gluon/restricted.py", line 173, in compile2\n    return compile(code.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\', layer, \'exec\')\n  File "/home/franzejr/web2py/applications/E_Learning/models/db.py", line 99\n    db.define_table(\'category\',\n     ^\nSyntaxError: invalid syntax\n'
p219
s.